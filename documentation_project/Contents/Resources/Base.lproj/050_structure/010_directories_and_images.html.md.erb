---
title:  Directories, filenames, images, and paths
blurb:  Learn about proper structure for your directory hierarchy, filenames,
        and image locations, and discover some best practices related to paths.
layout: template-logo-medium
---
<%= md_links %>
<%= md_images %>


<%= current_page.data.title %>
==============================

<%= current_page.data.blurb %>

Directory conventions
---------------------

You will have noticed by now that your content root appears to be two levels
below the actual project root. This is a result of the Apple Help directory
structure. Remember, _Middleman_ depends on building an output project that
mirrors the input project. In order for links, images, and other content to
be accessed properly, _Middlemac_ uses Apple’s convention.

Fortunately once inside the `Base.lproj` directory, we -- as help book 
developers -- are free to organize files as we see fit, despite the examples
you may have seen in Apple’s documentation. _Middlemac_, though, has setup a
hierarchy that “just works,” and the explanation follows. Starting at the top,
let’s look at a _Middleman_ project layout. Also don’t forget to have a look
later at [Apple Help setup][apple_help_setup].

Note the many of the file names below are written with destination, _built_
file extensions, and not the complete extension as it might appear in the source
directory. For example, the top level source file for `index.html` could have
the name `index.html.md.erb` or `index.html.haml`, as you see fit.
{:.note}

`Contents/`

 : Contains everything in your help project that will be compiled into or
   contribute to the final `.help` project.
   
`Contents/Info.plist`

 : The `Info.plist` file is the file that _Middlemac_ will process into the
   final `Info.plist` that your Mac OS X application needs in order to work with
   your help book. For a basic project you shouldn’t have to modify anything in
   this file, but if you want or need to have other key-value pairs in the final
   `Info.plist`, then add them here. 
   
`Contents/Resources/shared`

 : This directory contains assets that are common between all of your different
   help language projects. Although _Middlemac_ is not a multilingual solution
   _per se_, this is maintained because you can simply have a different
   _Middlemac_ project per language, and then merge in the other language
   `.lproj` directories into your final help book, sharing assets in this
   directory.
   
`Contents/Resources/Base.lproj`

 : This directory serves as your base [group][groups] and contains all of your
   help book’s content as well as pieces that will contribute to your content
   (such as templates).
   
   Any other files that result in `.html` in this directory level, except for
   `index.html` constitute part of the `Base.lproj` group. At this level you
   should start adding directories to contain your other groups.
   
`Contents/Resources/Base.lproj/index.html`

 : This is the top level file in your entire project, and is also the Apple
   Help System main landing page.
 
`Contents/Resources/Base.lproj/InfoPlist.strings`

 : The `InfoPlist.strings` file is the file that _Middlemac_ will process into
   the final `InfoPlist.strings`, which contains the localized version of your
   applications’ human-readable `Info.plist` data (specifically, `CFBundleName`
   and `HPDBookTitle`).
   
   _Middlemac_ is a multi-target solution for a single language, and not a
   multi-language solution _per se_, and so the `CFBundleName` in your
   `config.rb` will be used, whether it’s English or German or Chinese. This is
   one of the strengths of `Base.lproj`: it’s agnostic.

`Contents/Resources/Base.lproj/assets/`

 : This directory contains all of the non-content assets used in your help book
   such as stylesheets, images, etc., as well as data source files, templates,
   layouts and partials.
   
   You will notice that some of these classes of items are in unconventional
   locations compared to a default _Middleman_ project. This was done on your
   behalf for the sake of portability and for having a non-distracting directory
   environment.
   
   `_data/`
    : This directory contains data files that you can use to supply data for
      [using local data][using_local_data]. This directory will not be
      output in the final build.
    
   `_layouts/`
    : All layouts and templates should go here. This directory will not be
      output in the final build.
      
   `images/`
    : All images should go here. _Middleman_ will find them automatically if
      you use the helpers.
 
   `javascripts/`
    : Javascripts, if any, should go here. You should prefix each script with
      an underscore so that they will _not_ be included. The already-present
      file `all.js` will bundle them into a single file -- `all.js` -- and
      _that’s_ the file loaded by the _Middlemac_ layouts.

   `partials/`
    : Partials can go here, and should be prefaced with an underscore so that
      they will not generate build output. Partial files can also be included
      in any other directory, too. This is for organizational convenience of
      common partials that may be used anywhere.

   `stylesheets/`
    : Your `.css` and `.scss` files should go here. Read more about _Middlemac_
      CSS organization [here][css].

 
Images
------

Most images, of course, should go into the `images` directory of the `assets`
directory.

However _Middlemac_ also depends on some magic images being placed in
`Contents/Resources/shared/`:

`icon_32x32.png` and `icon_32x32@2x.png`

 : These files are your help file icon at 32 × 32 pixels and @2x, and will be
   used by the included templates automatically. More importantly, however, your
   main landing page is linked to this icon so that Apple Help Viewer knows what
   the help icon is.

`icon_256x256.png` and `icon_256x256@2x.png`

 : The same as above, but at 256 × 256 pixels and @2x.
 
You will also notice that there are target-specific versions of these images
located here, too. This documentation project takes advantage of them, and you
can do the same. Note that the non-target specific versions are still required
so that the Help Viewer knows to find them!


Images Organization
-------------------

When your content images are located in the `assets/images/` directory,
_Middleman_’s [helpers][middleman_helpers] can find them automatically
without any worry about relative or absolute file paths.


“Absolute” Paths
----------------

When using _Middleman_’s [helpers][middleman_helpers], absolute paths will be
converted to relative paths during the build. Absolute paths are relative to the
`Contents` directory and _not_ the filesystem root.

In general it’s _not_ recommended to use absolute paths unless you need assets
outside of _Middlemac_’s configuration. _Middleman_ will automatically build the
correct path using only the asset name when you use its helpers, if the assets
are in the correct directories (e.g., images in `images/`).

However you will use absolute paths to refer to items in the `shared/` directory
since this it outside of _Middlemac_’s normal search scope. The view templates
use this approach, for example.
