---
title:  About Ruby and its Ecosystem
blurb:  As the language that powers <em>Middlemac</em>, it’s worth taking a
        short look at the Ruby language and its ecosystem.
---
<%= md_links %>
<%= md_images %>

<%= current_page.data.blurb %>

[Ruby](https://www.ruby-lang.org/en/) is the language that _Middlemac_,
_Middleman_, and many of the others tools are written with. You do not have to
learn Ruby to take advantage of _Middlemac_, although some ability to work
with it will be invaluable to you.

Ruby may surprise you
---------------------

If you’re a software developer, then it’s highly likely that you will be able
to read most Ruby code immediately. Coming from an Objective-C or Swift
background, these are a few things that may surprise you.

### Symbols
Ruby has a type of identifier called a `symbol`. They are used quite
extensively and look like `:this_symbol`. As identifiers and not variables,
you can’t assign values to them. Their value is themselves, though they have
useful string representations (`:this_symbol.to_s`). You can even get the
symbol representation of `'this_string'.to_sym`. Because they're unique, they
make excellent array/hash keys and excellent, guaranteed unique values.

### Everything is an object
Everything is an object, including what are fundamental datatypes in other
languages. Need to convert the integer `i` to a float? It’s as easy as
`i.to_f`.
              
### Everything has a return value
In Ruby you don’t require `return value`, or `result := value`, or
`function_name = value`. Just `value`, alone, will return its value. Even `if`
statements return values:

~~~ ruby
result = if answer == 'yes'
            "The answer as affirmative."
         else
            "The answer was something else."
         end
~~~

This example assigns the appropriate string to the variable `result`.


Just enough Ruby
----------------
To work effectively with _Middlemac_ you’ll only have to learn enough Ruby to
do a few simple things:

- Set variables in the `config.rb` file.
- Use a few helper functions from within files, e.g., `partial 'my_file'`.
- Use conditionals, if you want them. You know: simply `if/else/end`, or even
  `unless/else/end`.


Gems
----

“Gems” are packages of Ruby or compiled code in a standard format that serve
as extensions or library additions to Ruby. _Middlemac_ is a system consisting
of the `middlemac` gem, among others.

By default Ruby is configured to fetch gems from
[rubygems.org](https://rubygems.org/), which is convenient as long as you are
connected to the internet.

Gems, as software, have versions and can have dependencies on other gems. This
can lead to dependency hell when multiple versions of multiple gems are
installed having a clash due to mixed dependencies. Luckily this has been
mostly solved via the use of Bundler.

Bundler
-------

Bundler is a gem version management system that ensures that the correct gem
version is used on a per-project basis, as specified in the `Gemfile` and
locked in `Gemfile.lock` (more on these below).

Using bundler will ensure that gem versions of known compatibility will be
used. For example, _Middlemac_ requires _Middleman_ version 4.2 or higher,
which itself requires other gems of specific versions. Bundler will ensure
that when building a _Middlemac_ project, _only_ the correct gems and versions
are used.

When you see a command such as:

~~~
bundle exec middleman build
~~~

…it means that Bundler will execute the `middleman` gem, and will take
responsibility for ensuring the correct gem versions are used. If we want to
leave it up to chance, we might try this:

~~~
middleman build
~~~

…and this might work, or it might not. Without using Bundler, the default
versions of gems installed on your system will be used, and they might not be
compatible with the default version of `middleman`.

Ruby projects, including _Middlemac_ Help Book projects, specify gem versions
using a file in the project directory called `Gemfile`.


`Gemfile` and `Gemfile.lock`
----------------------------

Your _Middlemac_ project contains this file to specify to Bundler which
versions of Ruby gems should be used. In general you don’t have to bother with
this file at all. However if you become more advanced and want to use other
gems, you’ll have to dive into this file eventually.

This file contains gems and the versions that are allowed. For example, this
documentation project’s `Gemfile` contains something similar to this:

~~~ ruby
gem 'middleman-targets', '~> 1.0.12'
~~~

This declaration tells Bundler that `middleman-targets` is a gem that is
required for this project, and that any version greater than 1.0.12
(inclusive) is allowed, but only in the `1.0.x` series. The `~>` is called a
“pessimistic operator” and is used if we don’t trust the `1.1.x` will break
nothing.

Other operators are available, too, of course, and are a simple web search
away.

The file `Gemfile.lock` is generated automatically by Bundler, and you should
never modify this file yourself. This file is the file that indicates to
Bundler the _exact_ versions of Gems that will be used. It ensures that the
set of gems always stays consistent (even if you update gems) unless you
deliberately want it to do otherwise.

Whether or not you add `Gemfile.lock` to version control is up to you. Doing
so mean that anyone that checks out your project will use the exact gem
versions that you have committed; otherwise, consistent with the rules in the
`Gemfile`, any checkouts will generate a `Gemfile.lock` and run using
different versions of the gems. In theory, this should be perfectly fine, but
API-breaking changes sometimes do happen with point updates.
{: .tip .callout}

### `bundle install`

When you `cd` into a project directory, you can:

~~~
bundle install
~~~

This tells Bundler to check the `Gemfile` and install any gems that are
required but are missing, typically from
[rubygems.org](https://rubygems.org/). After installing the gems Bundler will
also update the `Gemfile.lock`, thereby freezing the versions to be used in
your project.

What happens if I install a newer version of a Ruby gem? For example, if the
`Gemfile` is configured to use `middleman-targets` 1.0.12 or above, and I’ve
been building with it for weeks, and then update my gem to 1.0.14? In this
case, as long as 1.0.12 is still installed on your system, Bundler will still
use this version.

You’ll either have to update the `Gemfile` with 1.0.14 and then `bundle
install` again, or…

### `bundle update`

This tells Bundler to install newer versions of all of your Gems, if
available, and within the pessimistic version checks in the `Gemfile`, and
also updates `Gemfile.lock` so that newer versions of the gems will be used.

~~~
bundle update
~~~


`config.rb`
-----------

Nearly every Ruby project, including your _Middlemac_ Help Book project,
follows the convention of configuration via a `config.rb` file in the root
level of your project directory. 

Information specific to _Middlemac_’s `config.rb` is available in the
[appropriate section][setup] of this documentation.
