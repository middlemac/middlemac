---
title:  Including and excluding targets and features
blurb:  A reference of how to use targets and features in more detail than that
        provided in the Basics section.
layout: template-logo-medium
---
<%= partial 'markdown-links' %>
<%= partial 'markdown-images' %>


<%= current_page.data.title %>
==============================

<%= current_page.data.blurb %>


Why include and exclude?
------------------------

Although _Middlemac_ is an excellent tool for developing single-target Apple
Helpbooks, it really shines when you want to develop multiple versions of
helpbooks for multiple versions of your application.

Delivering a help system tailored _specifically_ for the version of the
application that it belongs to will increase user satisfaction by allowing them
to focus on the aspects of the help that’s applicable to them. No one wants to
attempt to solve a problem and then learn, during troubleshooting, that some
fancy feature is only available in some other version of your application.

You want to promote other versions of your application, certainly. Multiple
targets allows you appropriately place upsell messages without distracting
your users. It also allows you to avoid upselling the users who are already
using your premium or top-level version.

Maybe your application is available on your website and also the Mac App Store?
In this case there are certainly going to be feature differences. You web
version uses _Sparkle_ for updates, but the MAS version doesn’t. Your MAS
version requires users to authorize writing to user directories because of
sandboxing, whereas your web-distributed version does not.

Make your help files as polished as your applications, and users will be happy
and delighted without even really knowing why!


Include and exclude concepts
----------------------------

In the simplest case you have help page that is present for all versions of your
helpbook, but some of the content will be different for different targets and
features. You’ve already seen how [`target_name?`][07_targets_overview] and 
[`target_feature?`][08_features_overview] can be used to show and hide specific
content on each page.

In the case of wanting to hide or show entire pages based on target or feature,
you’ve also seen the `target` and `exclude` frontmatter keys. When used, you
have excellent control over whether entire pages are visible or not.

However there’s a potential issue with this strategy: You see, _Middleman_ will
output every buildable file in your project to the output build directory,
whether it applies to your target or not. Currently there is no way to configure
_Middleman_ to work in a different manner.

One might be forgiven for thinking that it’s not important; as long as these
pages are hidden in navigation, the user will never find them anyway. And what
importance is a couple of extra K in your help bundle size?

`hiutil` is the reason that it’s important. This is the tool that _Middlemac_
runs after _Middleman_ builds your output. It’s the Apple help Indexing
utility, and it generates the index that allows users to search help. Now you
can see the issue: if hidden content is indexed, the user can still get to it!

Therefore we have to implement a two-pronged approach. If you want to exclude
entire pages, you will have to use the frontmatter keys to hide it from
navigation, _and also_ use the helpers to ensure that when _Middleman_ builds
your file, it produces only a blank HTML document.

Note: If you’re building on Linux, _Middlemac_ detects that `hiutil` is not
present and will leave the last-built help index, if any, alone. If there’s no
previous help index, one will not be created. After all, although _Middlemac_
is intended for Mac OS X help files, there’s no saying you can’t use it for
iOS help or even standard web pages.
{:.note}
